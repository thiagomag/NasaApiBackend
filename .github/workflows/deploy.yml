name: CI/CD Pipeline for Spring Boot Backend

on:
  push:
    branches:
      - master  # Build automático ao enviar código para a branch "master"
  workflow_dispatch:  # Deploy manual

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production  # Especifica o environment "production" para este job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Verificar o diretório de trabalho antes do build
      - name: Print current working directory
        run: pwd

      # Step 2: Listar o conteúdo do diretório de trabalho para verificar onde o Maven está
      - name: List working directory contents
        run: ls -al

      # Step 3: Configurar o JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Step 4: Build com Maven usando o JDK 17
      - name: Build with Maven
        run: mvn clean install

      # Step 5: Verificar se o diretório target foi criado
      - name: Check for target directory
        run: |
          if [ ! -d "target" ]; then
            echo "Maven build failed or did not generate the target directory."
            exit 1
          else
            echo "Target directory exists."
          fi

      # Step 6: Listar arquivos no diretório target
      - name: List target directory
        run: ls -al target/

      # Step 7: Upload de artefatos (atualizado para v3)
      - name: Upload build artifact
        uses: actions/upload-artifact@v3  # Atualizado para v3
        with:
          name: spring-boot-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production  # Especifica o environment "production" para este job
    if: github.event_name == 'workflow_dispatch'  # Executa o deploy apenas manualmente

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 8: Encontrar o arquivo .jar gerado
      - name: Find JAR file
        id: jar-file
        run: |
          JAR_PATH=$(find target/ -name '*.jar')
          if [ -z "$JAR_PATH" ]; then
            echo "No JAR file found in target/ directory."
            exit 1
          else
            echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          fi

      # Step 9: Verificar se o arquivo JAR foi encontrado
      - name: Verify JAR file existence
        run: |
          echo "JAR file path is: ${{ env.JAR_PATH }}"

      # Step 10: Copiar o arquivo JAR para a instância EC2 via SCP
      - name: Deploy to AWS EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "${{ env.JAR_PATH }}"
          target: "/home/ec2-user/app/"

      # Step 11: Conectar na instância EC2 via SSH e iniciar o Spring Boot
      - name: Run Spring Boot on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            cd /home/ec2-user/app/
            nohup java -jar *.jar > log.txt 2>&1 &
