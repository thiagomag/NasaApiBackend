name: CI/CD Pipeline for Spring Boot Backend

on:
  push:
    branches:
      - main  # Build automático ao enviar código para a branch "main"
  workflow_dispatch:  # Deploy manual

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Configurar o JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Step 2: Build com Maven usando o JDK 17
      - name: Build with Maven
        run: mvn clean install

      # Step 3: Upload de artefatos (opcional)
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: spring-boot-app
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'  # Executa o deploy apenas manualmente

    steps:
      # Step 4: Checkout do código novamente no step de deploy
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 5: Copiar o arquivo JAR para a instância EC2 via SCP
      - name: Deploy to AWS EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: "target/*.jar"
          target: "/home/ec2-user/app/"

      # Step 6: Conectar na instância EC2 via SSH e iniciar o Spring Boot
      - name: Run Spring Boot on EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            cd /home/ec2-user/app/
            nohup java -jar *.jar > log.txt 2>&1 &
